Question 150- How to Implement SCD1 Type in Data Flows?
CREATE TABLE SCD_Type1_Emp (
    EmpID INT,    
    Name VARCHAR(100), 
    Country VARCHAR(50) , 
    Department VARCHAR(50) 
);

-- Insert sample rows
INSERT INTO SCD_Type1_Emp (EmpID, Name, Country, Department)
VALUES
    (101, 'Amit Sharma', 'India', 'IT'),
    (102, 'Ashwini Singh', 'India', 'Electronic');

select * from SCD_Type1_Emp;
--Add some records
106, Anjali Mehta, India, Computer
107, Mahesh Iche, US, Service Desk
108, Mayur Shinde, UK, Software
109, Sagar Kale, US, Service Desk
===============================================================================================================
Question 151- How to Implement SCD2 Type in Data Flows?

--Create table for SCD_Type2 Query
    CREATE TABLE SCD_Type2_Emp (
        SurrogateKey int identity,
        EmpID INT,
        EmpName NVARCHAR(100),
        Gender NVARCHAR(10),
        Country NVARCHAR(50),
        IsActive int
    );
    insert into SCD_Type2_Emp values(101, 'Rahul Singh','Male','India',1)
    select * from SCD_Type2_Emp;

===============================================================================================================

Question- Create two NoteBooks one Note Book Create Employee Dataframe,Second NoteBook Create Dept dataframe, in Second Note Join Dept daaframe with Emp Dataframe?

# Create the Employee DataFrame
from pyspark.sql.types import StructType, StructField, StringType, IntegerType

# Define schema for Employee DataFrame
emp_schema = StructType([
    StructField("emp_id", IntegerType(), True),
    StructField("emp_name", StringType(), True),
    StructField("dept_id", IntegerType(), True)
])

# Sample employee data
emp_data = [
    (1, "Alice", 101),
    (2, "Bob", 102),
    (3, "Charlie", 101),
    (4, "David", 103)
]

# Create Employee DataFrame
emp_df = spark.createDataFrame(data=emp_data, schema=emp_schema)

# Display the Employee DataFrame
emp_df.show()

---------------------

# Create the Department DataFrame

from pyspark.sql.types import StructType, StructField, StringType, IntegerType

# Define schema for Department DataFrame
dept_schema = StructType([
    StructField("dept_id", IntegerType(), True),
    StructField("dept_name", StringType(), True)
])

# Sample department data
dept_data = [
    (101, "HR"),
    (102, "Engineering"),
    (103, "Marketing")
]

# Create Department DataFrame
dept_df = spark.createDataFrame(data=dept_data, schema=dept_schema)

# Display the Department DataFrame
dept_df.show()
=====================================================================================
# Schema evolution

from pyspark.sql.types import StructType, StructField, StringType, IntegerType

# Sample data
data = [
    (1, "John","test_data")
]

# Define schema for DataFrame
schema = StructType([
    StructField("ID", IntegerType(), True),
    StructField("Name", StringType(), True),
    StructField("additional_column1", StringType(), True)
])

# Create DataFrame
df = spark.createDataFrame(data, schema)

# Show DataFrame
display(df)
=====================================================================================

# Version controlling in delta table
%sql
--STEP1- Create table
-- Create the Delta Table
CREATE TABLE delta_table(
  ID INT,
  Name STRING,
  Country STRING
)
USING DELTA
LOCATION '/FileStore/Tables/Delta/delta_table';

%sql
--Step2- Insert Data into the Partitioned Delta Table
INSERT INTO delta_table VALUES
(1, 'Alice', 'India'),
(2, 'Bob', 'USA'),
(3, 'Charlie', 'France'),
(4, 'David', 'Germany'),
(5, 'Eva', 'Japan');

--Step 2: Perform some Updates and delete to Generate Versions

-- Update the table to create a new version
UPDATE delta_table
SET Name = 'Alice_updated'
WHERE ID = 1;

-- Add another version by deleting data
DELETE FROM delta_table WHERE Country = 'France';
=====================================================================================
-- SCD Type1 implementation using SQL
%sql
-- Step 1: Create the Target Table (Existing Customers)
CREATE TABLE customer (
    customer_id INT,
    name VARCHAR(50),
    email VARCHAR(100),
    city VARCHAR(50)
);

-- Insert Initial Data
INSERT INTO customer VALUES 
(1, 'Alice', 'alice@example.com', 'New York'),
(2, 'Bob', 'bob@example.com', 'San Francisco'),
(3, 'Charlie', 'charlie@example.com', 'Seattle');

-- Check Initial Data
SELECT * FROM customer;

%sql
-- Step 2: Create a Staging Table (Incoming Data)
CREATE TABLE customer_staging (
    customer_id INT,
    name VARCHAR(50),
    email VARCHAR(100),
    city VARCHAR(50)
);

-- Insert New and Updated Data
INSERT INTO customer_staging VALUES 
(1, 'Alice', 'alice_new@example.com', 'New York'), -- Email Changed
(2, 'Bob', 'bob@example.com', 'San Francisco'), -- No Change
(3, 'Charlie', 'charlie@example.com', 'Seattle'), -- No Change
(4, 'David', 'david@example.com', 'Los Angeles'); -- New Customer

%sql
-- Step 3: Perform UPSERT (Merge Update and Insert)
MERGE INTO customer AS tgt
USING customer_staging AS src
ON tgt.customer_id = src.customer_id

WHEN MATCHED THEN
    UPDATE SET 
        tgt.name = src.name,
        tgt.email = src.email,
        tgt.city = src.city

WHEN NOT MATCHED THEN
    INSERT (customer_id, name, email, city)
    VALUES (src.customer_id, src.name, src.email, src.city);

