####### Create mount point between ADLS using Databricks#######

# 1. Replace all <storage-account> with our storage account
# 2. Replace <application-id> or <client_id> at 3rd line with app_id(with quote)
# 3. Replace service_credential at 4th line with secret(with quote)
# 4. Replace <directory-id> at 5th line with tenant_id(without quote)

spark.conf.set("fs.azure.account.auth.type.<storage-account>.dfs.core.windows.net", "OAuth")
spark.conf.set("fs.azure.account.oauth.provider.type.<storage-account>.dfs.core.windows.net", "org.apache.hadoop.fs.azurebfs.oauth2.ClientCredsTokenProvider")
spark.conf.set("fs.azure.account.oauth2.client.id.<storage-account>.dfs.core.windows.net", "<application-id>")
spark.conf.set("fs.azure.account.oauth2.client.secret.<storage-account>.dfs.core.windows.net", service_credential)
spark.conf.set("fs.azure.account.oauth2.client.endpoint.<storage-account>.dfs.core.windows.net", "https://login.microsoftonline.com/<directory-id>/oauth2/token")

####### Code from Chat GPT with work perfactly #######
# Replace <client_id> in 3rd line using client_id with double quote("")
# Replace <client_secret> in 4th line with secret with double quote("")
# Replace <tenant_id> in 5th line without double quote("")
configs = {
  "fs.azure.account.auth.type": "OAuth",
  "fs.azure.account.oauth.provider.type": "org.apache.hadoop.fs.azurebfs.oauth2.ClientCredsTokenProvider",
  "fs.azure.account.oauth2.client.id": "<client_id>",
  "fs.azure.account.oauth2.client.secret": "<client_secret>",
  "fs.azure.account.oauth2.client.endpoint": "https://login.microsoftonline.com/<tenant_id>/oauth2/token"
}

dbutils.fs.mount(
  source = "abfss://<container_name>@<storage_account_name>.dfs.core.windows.net/",
  mount_point = "/mnt/<mount_name>",
  extra_configs = configs
)

==========================================================================================
# 1. Calendar
df_cal = spark.read.format('csv')\
    .option('header', 'true')\
    .option('inferSchema', 'true')\
    .load('abfss://bronze@eclasessgen2.dfs.core.windows.net/AdventureWorks_Calendar')

# 2. Customers
df_cus = spark.read.format('csv')\
    .option('header', 'true')\
    .option('inferSchema', 'true')\
    .load('abfss://bronze@eclasessgen2.dfs.core.windows.net/AdventureWorks_Customers')


# 3. products
df_products = spark.read.format('csv')\
    .option('header', 'true')\
    .option('inferSchema', 'true')\
    .load('abfss://bronze@eclasessgen2.dfs.core.windows.net/AdventureWorks_Products')


# 4. Product Returns
df_prod_returns = spark.read.format('csv')\
    .option('header', 'true')\
    .option('inferSchema', 'true')\
    .load('abfss://bronze@eclasessgen2.dfs.core.windows.net/AdventureWorks_Returns')

# 5. Sales 
df_sales_15 = spark.read.format('csv')\
    .option('header', 'true')\
    .option('inferSchema', 'true')\
    .load('abfss://bronze@eclasessgen2.dfs.core.windows.net/AdventureWorks_Sales')


# 6. Territories
df_terr = spark.read.format('csv')\
    .option('header', 'true')\
    .option('inferSchema', 'true')\
    .load('abfss://bronze@eclasessgen2.dfs.core.windows.net/AdventureWorks_Territories')
=================================================================
# 1. Calendar
df_calendar = spark.read.format("csv") \
    .option("header", "true") \
    .option("inferSchema", "true") \
    .load("/mnt/upskill/AdventureWorks_Calendar")

# 2. Customers
df_customers = spark.read.format("csv") \
    .option("header", "true") \
    .option("inferSchema", "true") \
    .load("/mnt/upskill/AdventureWorks_Customers")

# 3. Product Categories
df_products = spark.read.format("csv") \
    .option("header", "true") \
    .option("inferSchema", "true") \
    .load("/mnt/upskill/AdventureWorks_Products")

#4. Product Returns
df_returns = spark.read.format("csv") \
    .option("header", "true") \
    .option("inferSchema", "true") \
    .load("/mnt/upskill/AdventureWorks_Returns")

# 5. Sales
df_sales = spark.read.format("csv") \
    .option("header", "true") \
    .option("inferSchema", "true") \
    .load("/mnt/upskill/AdventureWorks_Sales")

#6. Territories
df_territories = spark.read.format("csv") \
    .option("header", "true") \
    .option("inferSchema", "true") \
    .load("/mnt/upskill/AdventureWorks_Territories")

=================================================================
# Saving the data
# 1. Calendar
df_calendar.write.format('parquet')\
    .mode('append')\
    .option("path", "abfss://silver@projectstorage.dfs.core.windows.net/AdventureWorks_Calendar")\
    .save()

# 2. Customers
df_customers.write.format('parquet')\
    .mode('append')\
    .option("path", "abfss://silver@projectstorage.dfs.core.windows.net/AdventureWorks_Customers")\
    .save()

# 3. Products
df_products.write.format('parquet')\
    .mode('append')\
    .option("path", "abfss://silver@projectstorage.dfs.core.windows.net/AdventureWorks_Products")\
    .save()

# 4. Returns
df_returns.write.format('parquet')\
    .mode('append')\
    .option("path", "abfss://silver@projectstorage.dfs.core.windows.net/AdventureWorks_Returns")\
    .save()

# 5. Sales
df_sales.write.format('parquet')\
    .mode('append')\
    .option("path", "abfss://silver@projectstorage.dfs.core.windows.net/AdventureWorks_Sales")\
    .save()

# 6. Territories
df_territories.write.format('parquet')\
    .mode('append')\
    .option("path", "abfss://silver@projectstorage.dfs.core.windows.net/AdventureWorks_Territories")\
    .save()
=================================================================
--Open Rowset function syntax
SELECT *
    FROM 
        OPENROWSET(
            BULK 'https://<storage_account_name>.dfs.core.windows.net/silver/<file_name>/',
            FORMAT = 'PARQUET'
        ) as query1

=================================================================
Creating View Script
---------------------------
--1 CREATE VIEW CALENDARS
---------------------------
CREATE VIEW gold.Calendars
AS
    SELECT *
    FROM OPENROWSET(
        BULK 'https://eclasessgen2.blob.core.windows.net/silver/AdventureWorks_Calendars/',
        FORMAT = 'PARQUET'
    ) AS QUERY1;

---------------------------
--2 CREATE VIEW CUSTOMERS
---------------------------
CREATE VIEW gold.Customers
AS
    SELECT *
    FROM OPENROWSET(
        BULK 'https://eclasessgen2.blob.core.windows.net/silver/AdventureWorks_Customers/',
        FORMAT = 'PARQUET'
    ) AS QUERY2;

---------------------------
--3 CREATE VIEW PRODUCTS
---------------------------
CREATE VIEW gold.Products
AS
    SELECT *
    FROM OPENROWSET(
        BULK 'https://eclasessgen2.blob.core.windows.net/silver/AdventureWorks_Products/',
        FORMAT = 'PARQUET'
    ) AS QUERY3;

---------------------------
--4 CREATE VIEW RETURNS
---------------------------
CREATE VIEW gold.Returns
AS
    SELECT *
    FROM OPENROWSET(
        BULK 'https://eclasessgen2.blob.core.windows.net/silver/AdventureWorks_Returns/',
        FORMAT = 'PARQUET'
    ) AS QUERY4;

---------------------------
--5 CREATE VIEW SALES
---------------------------
CREATE VIEW gold.Sales
AS
    SELECT *
    FROM OPENROWSET(
        BULK 'https://eclasessgen2.blob.core.windows.net/silver/AdventureWorks_Sales/',
        FORMAT = 'PARQUET'
    ) AS QUERY5;

---------------------------
--6 CREATE VIEW TERRITORIES
---------------------------
CREATE VIEW gold.Territories
AS
    SELECT *
    FROM OPENROWSET(
        BULK 'https://eclasessgen2.blob.core.windows.net/silver/AdventureWorks_Territories/',
        FORMAT = 'PARQUET'
    ) AS QUERY6;

========================================================================================
Polybase script to connect ADLS to Synapse analytics
Note- Run this query in newly created database(synapsedatabase) not in master DB
 --Step 1- Create master key encryption            --Drop master key if already created DROP MASTER KEY;
 CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Admin@123';


--Step 2- Create database scope credential
 CREATE DATABASE SCOPED CREDENTIAL cred_gaurav
 with IDENTITY = 'Managed Identity';

 --Step 3- Creating external data source for silver layer
 CREATE EXTERNAL DATA SOURCE source_silver
 WITH(
    LOCATION = 'https://eclasessgen2.blob.core.windows.net/silver',
    CREDENTIAL = cred_gaurav
 )

--Step 4- Create external data source for gold layer

 CREATE EXTERNAL DATA SOURCE source_gold
 WITH(
    LOCATION = 'https://eclasessgen2.blob.core.windows.net/gold',
    CREDENTIAL = cred_gaurav
 )

 --Step 5- Create external file format
 CREATE EXTERNAL FILE FORMAT format_parquet
 WITH
 (
    FORMAT_TYPE = PARQUET,
    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'
 )
===========================================================================================
--CETAS QUERY
Note- Run this query in newly created database(synapsedatabase) not in master DB
---------------------------------------
--1 CREATE EXTERNAL TABLE EXTCALENDAR
---------------------------------------
CREATE EXTERNAL TABLE gold.Calendars_ext
WITH
(
    LOCATION = 'extCalendars_new',
    DATA_SOURCE = source_gold,
    FILE_FORMAT = format_parquet
)AS
SELECT * FROM gold.Calendars

---------------------------------------
--2 CREATE EXTERNAL TABLE EXTCUSTOMERS
---------------------------------------
CREATE EXTERNAL TABLE gold.Customers_ext
WITH
(
    LOCATION = 'extcustomers_new',
    DATA_SOURCE = source_gold,
    FILE_FORMAT = format_parquet
)AS
SELECT * FROM gold.Customers

---------------------------------------
--3 CREATE EXTERNAL TABLE EXTPRODUCTS
---------------------------------------
CREATE EXTERNAL TABLE gold.Products_ext
WITH
(
    LOCATION = 'extproducts_new',
    DATA_SOURCE = source_gold,
    FILE_FORMAT = format_parquet
)AS
SELECT * FROM gold.Products

---------------------------------------
--4 CREATE EXTERNAL TABLE EXTRETURNS
---------------------------------------
CREATE EXTERNAL TABLE gold.Returns_ext
WITH
(
    LOCATION = 'extreturns_new',
    DATA_SOURCE = source_gold,
    FILE_FORMAT = format_parquet
)AS
SELECT * FROM gold.Returns


---------------------------------------
--5 CREATE EXTERNAL TABLE EXTSALES
---------------------------------------
CREATE EXTERNAL TABLE gold.Sales_ext
WITH
(
    LOCATION = 'extsales',
    DATA_SOURCE = source_gold_new,
    FILE_FORMAT = format_parquet
)AS
SELECT * FROM gold.Sales


---------------------------------------
--6 CREATE EXTERNAL TABLE EXTTERRITORIES
---------------------------------------
CREATE EXTERNAL TABLE gold.Territories_ext
WITH
(
    LOCATION = 'extterritories_new',
    DATA_SOURCE = source_gold,
    FILE_FORMAT = format_parquet
)AS
SELECT * FROM gold.Territories







